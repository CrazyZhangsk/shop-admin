<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
http://www.springframework.org/schema/data/jpa ">

    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
    <!-- 扫描项目中XX包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>
    <context:component-scan base-package="com.fh.shop.backend.api"/>

    <!-- 加载@DateTimeFormat-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    </bean>

    <!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- @ResponseBody的注解驱动 -->
    <mvc:annotation-driven/>

    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--
                       /**的意思是所有文件夹及里面的子文件夹 
                       /*是所有文件夹，不含子文件夹 
                       /是web项目的根目录
                     -->
            <mvc:mapping path="/**"/>
            <!-- 需排除拦截的地址 -->
            <mvc:exclude-mapping path="/user/toLoginHtml.jhtml"/>
            <mvc:exclude-mapping path="/user/userLogin.jhtml"/>
            <mvc:exclude-mapping path="/user/login.jhtml"/>
            <mvc:exclude-mapping path="/user/toAddUserPage.jhtml"/>
            <mvc:exclude-mapping path="/user/addUser.jhtml"/>
            <mvc:exclude-mapping path="/api/product/findProductList.jhtml"/>
            <bean id="commonInterceptor" class="com.fh.shop.backend.myInterceptor.UserInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- AOP管理日志 -->
    <!-- IOC控制反转，创建bean的实例 -->
    <!--<bean id="logManage" class="com.fh.shop.backend.aspect.LogAspect"></bean>-->
    <!-- 配置日志AOP动态代理 -->
    <!--<aop:config>
        <aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.insert*(..))||execution(* com.fh.shop.backend.controller..*.del*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.add*(..))" id="loginPointcut"/>
        <aop:aspect ref="logManage">
            <aop:around method="doLog" pointcut-ref="loginPointcut"/>
        </aop:aspect>
    </aop:config>-->

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>10000000</value>
        </property>
    </bean>
</beans>